    async def process_child_accounts(self, master_account, change):
        print(f"MASTER ACCOUNT: {master_account.account_id}")
        print(f"CHANGE: {change}")
        print(f"HAS CHILD ACCOUNTS: {len(master_account.child_accounts) > 0}")
        processed_cancellations = set()
        for change_type, change_list in change.items():
            if not change_list:
                continue

            # In process_child_accounts, inside the ordersCreated branch:
            if change_type == "ordersCreated":
                for order in change_list:
                    if "replacesOrderID" in order:
                        replaced_id = order.get("replacesOrderID")
                        processed_cancellations.add(replaced_id)
                        print(
                            f"(Line 104 in copier.py) Detected modification; original order {replaced_id} marked for cancellation suppression.")
                        await self.process_order_modification(original_parent_order_id=replaced_id,
                                                              master_account=master_account, change=order)
                    else:
                        order_type = order.get("type", "").upper()
                        if order_type == "MARKET":
                            print("(Line 108 in copier.py) Detected new market order creation.")
                            await self.process_market_order(master_account, order)
                        elif order_type in ("STOP_LOSS", "TAKE_PROFIT"):
                            print(f"(Line 108 in copier.py) Detected new trade order update for {order_type}.")
                            await self.process_trade_order_update(master_account, order)
                        else:
                            print("(Line 108 in copier.py) Detected new order creation.")
                            await self.process_new_order(master_account, order)

            elif change_type == "ordersCancelled":
                for order in change_list:
                    if order.get("id") in processed_cancellations:
                        print(f"(Line 114 in copier.py) Skipping cancellation for order {order.get('id')} as it's part of a modification.")
                        continue
                    else:
                        print(f"(Line 117 in copier.py) Processing direct cancellation for order {order.get('id')}.")

            elif change_type == "ordersFilled":
                for order in change_list:
                    order_type = order.get("type", "").upper()
                    if order_type == "MARKET":
                        if "stopLossOnFill" in order or "takeProfitOnFill" in order:
                            print(
                                f"(Line XYZ in copier.py) Detected update to trade orders for market order {order.get('id')}; updating trade orders on child accounts.")
                            await self.process_trade_order_update(master_account, order)
                        else:
                            print(f"(Line XYZ in copier.py) Detected market order fill for order {order.get('id')}; replicating on child accounts.")
                            await self.process_market_order(master_account, order)
                    else:
                        print(f"Processing fill for order {order.get('id')}.")

            elif change_type == "transactions":
                for txn in change_list:
                    if txn.get("type") == "ORDER_CANCEL":
                        if txn.get("orderID") in processed_cancellations:
                            print(
                                f"Skipping transaction cancellation for order {txn.get('orderID')} as it's already processed.")
                            continue
                        else:
                            print(f"Processing transaction cancellation for order {txn.get('orderID')}.")
                            await self.process_order_cancellations(master_account, txn)
            else:
                print(f"Unhandled change type: {change_type}")
